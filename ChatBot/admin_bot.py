import os
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from dotenv import load_dotenv
from aiogram.utils import executor
import time
import asyncio

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
ADMIN_BOT_TOKEN = os.getenv('ADMIN_BOT_TOKEN')
ADMIN_IDS = os.getenv('ADMIN_ID', '').split(',')

bot = Bot(token=ADMIN_BOT_TOKEN)
dp = Dispatcher(bot)

DB_PATH = 'orders.db'

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã ---
def init_db():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS orders (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        username TEXT,
        usertag TEXT,
        service TEXT,
        price INTEGER,
        details TEXT,
        status TEXT,
        result_file TEXT
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS not_admins (
        user_id INTEGER PRIMARY KEY
    )''')
    conn.commit()
    conn.close()

init_db()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
get_admin_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton('–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'))

# --- /start ---
@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id in ADMIN_IDS:
        await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –û–∂–∏–¥–∞–π—Ç–µ –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã.', reply_markup=types.ReplyKeyboardRemove())
        await send_new_orders(message.from_user.id)
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ-–∞–¥–º–∏–Ω–∞
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute('INSERT OR IGNORE INTO not_admins (user_id) VALUES (?)', (user_id,))
        conn.commit()
        conn.close()
        await message.answer('–≠—Ç–æ –∞–¥–º–∏–Ω-–±–æ—Ç –¥–ª—è @orderenineenngbot. –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.', reply_markup=get_admin_kb)

# --- –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
@dp.message_handler(lambda m: m.text == '–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
async def get_admin_rights(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id in ADMIN_IDS:
        await message.answer('–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã! –û–∂–∏–¥–∞–π—Ç–µ –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã.', reply_markup=types.ReplyKeyboardRemove())
        await send_new_orders(message.from_user.id)
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.')

# --- –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∞–¥–º–∏–Ω–∞–º ---
async def send_new_orders(admin_id):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT * FROM orders WHERE status='new'")
    orders = c.fetchall()
    conn.close()
    for order in orders:
        order_id, user_id, username, usertag, service, price, details, status, result_file = order
        text = f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!ü•≥\n\n–Æ–∑–µ—Ä–Ω–µ–π–º: @{usertag}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {price}$\n–£—Å–ª—É–≥–∞ –¥–∏–∑–∞–π–Ω–∞: {service}\n–¢–ó: {details}"
        ikb = InlineKeyboardMarkup().add(InlineKeyboardButton('–û—Ç–¥–∞—Ç—å –∑–∞–∫–∞–∑', callback_data=f'deliver_{order_id}'))
        await bot.send_message(admin_id, text, reply_markup=ikb)

# --- –ö–Ω–æ–ø–∫–∞ "–û—Ç–¥–∞—Ç—å –∑–∞–∫–∞–∑" ---
@dp.callback_query_handler(lambda c: c.data.startswith('deliver_'))
async def deliver_order(call: types.CallbackQuery):
    order_id = int(call.data.split('_')[1])
    await call.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ .png —Ñ–∞–π–ª –∑–∞–∫–∞–∑–∞ (—Ç–æ–ª—å–∫–æ PNG).')
    dp.register_message_handler(lambda m: True, lambda m: m.from_user.id == call.from_user.id, content_types=types.ContentType.DOCUMENT, state=None, once=True)(lambda m: handle_png(m, order_id, call))

async def handle_png(message: types.Message, order_id, call):
    if not message.document or not message.document.file_name.lower().endswith('.png'):
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ .png —Ñ–∞–π–ª!')
        return
    file = await message.document.download()
    file_path = f'order_{order_id}.png'
    with open(file_path, 'wb') as f:
        f.write(file.read())
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("UPDATE orders SET status='done', result_file=? WHERE id=?", (file_path, order_id))
    c.execute("SELECT user_id FROM orders WHERE id=?", (order_id,))
    user_id = c.fetchone()[0]
    conn.commit()
    conn.close()
    await message.answer('PNG –ø—Ä–∏–Ω—è—Ç! –ó–∞–∫–∞–∑ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π.')
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ balance_bot.py (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ –±–∞–∑—É –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª)
    # –ù–∞–ø—Ä–∏–º–µ—Ä, balance_bot.py –º–æ–∂–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –±–∞–∑—É –Ω–∞ –Ω–æ–≤—ã–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É ---
async def check_support():
    while True:
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute("SELECT id, username, message FROM support WHERE status='new'")
        supports = c.fetchall()
        for support_id, username, message in supports:
            for admin_id in ADMIN_IDS:
                if not admin_id:
                    continue
                text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–∞–ø–∏—Å–∞–ª –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:\n\n{message}"
                ikb = InlineKeyboardMarkup().add(InlineKeyboardButton('–û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', callback_data=f'support_reply_{support_id}'))
                await bot.send_message(int(admin_id), text, reply_markup=ikb)
            c.execute("UPDATE support SET status='notified' WHERE id=?", (support_id,))
        conn.commit()
        conn.close()
        await asyncio.sleep(10)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
@dp.callback_query_handler(lambda c: c.data.startswith('support_reply_'))
async def support_reply(call: types.CallbackQuery):
    support_id = int(call.data.split('_')[-1])
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –í–∞—à–µ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –µ–º—É. (–ú–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç)')
    dp.register_message_handler(lambda m: True, lambda m: m.from_user.id == call.from_user.id, content_types=types.ContentType.TEXT, state=None, once=True)(lambda m: handle_support_answer(m, support_id, call))

async def handle_support_answer(message: types.Message, support_id, call):
    answer = message.text.strip()
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("UPDATE support SET admin_reply=?, status='answered' WHERE id=?", (answer, support_id))
    c.execute("SELECT username FROM support WHERE id=?", (support_id,))
    username = c.fetchone()[0]
    conn.commit()
    conn.close()
    await message.answer('–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!')
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω–æ–≥–æ –±–æ—Ç–∞ (balance_bot)
    try:
        from telegram import Bot as TgBot
        USER_BOT_TOKEN = os.getenv('BOT_TOKEN')
        user_bot = TgBot(token=USER_BOT_TOKEN)
        # –ü–æ–ª—É—á–∞–µ–º user_id –ø–æ username (–∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º user_id –≤ support –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏)
        # –ó–¥–µ—Å—å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ username = usertag, –∞ user_id –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –±–∞–∑—ã
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute("SELECT user_id FROM orders WHERE usertag=? ORDER BY id DESC LIMIT 1", (username,))
        row = c.fetchone()
        conn.close()
        if row:
            user_id = row[0]
            text = f"–¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ç–≤–µ—Ç–∏–ª–∞ –≤–∞–º:\n\n{answer}"
            await user_bot.send_message(chat_id=user_id, text=text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

# --- –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π ---
if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(check_support())
    executor.start_polling(dp, skip_updates=True) 