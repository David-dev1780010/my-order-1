import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import requests
from flask import Flask, request, jsonify
import threading
import hmac
from hashlib import sha256
import os
from dotenv import load_dotenv
import sqlite3
from aiogram import Bot, Dispatcher, types, executor
import asyncio

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
CRYPTO_PAY_TOKEN = os.getenv("CRYPTO_PAY_TOKEN")

if not BOT_TOKEN or not CRYPTO_PAY_TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–æ–∫–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

logging.basicConfig(level=logging.INFO)

# –ë–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (user_id: balance)
balances = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect("orders.db")
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS orders (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        username TEXT,
        usertag TEXT,
        service TEXT,
        price INTEGER,
        details TEXT,
        status TEXT,
        result_file TEXT,
        notified INTEGER DEFAULT 0,
        delivered INTEGER DEFAULT 0
    )''')
    conn.commit()
    conn.close()

init_db()

# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è webhook –∏ –±–∞–ª–∞–Ω—Å–∞
app = Flask(__name__)

@app.route('/crypto_pay_webhook', methods=['POST'])
def crypto_pay_webhook():
    signature = request.headers.get('crypto-pay-api-signature')
    raw_body = request.get_data()  # raw bytes
    secret = sha256(CRYPTO_PAY_TOKEN.encode()).digest()
    h = hmac.new(secret, raw_body, 'sha256').hexdigest()
    if h != signature:
        return jsonify({'ok': False, 'error': 'Invalid signature'}), 403

    data = request.json
    if data.get('update_type') == 'invoice_paid':
        invoice = data.get('payload', {})
        user_id = invoice.get('user_id')
        amount = float(invoice.get('amount', 0))
        if user_id:
            balances[user_id] = balances.get(user_id, 0) + amount
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            requests.post(f'https://api.telegram.org/bot{BOT_TOKEN}/sendMessage', json={
                'chat_id': user_id,
                'text': f'‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} USDT.'
            })
    return jsonify(ok=True)

@app.route('/get_balance', methods=['GET'])
def get_balance():
    user_id = request.args.get('user_id')
    if not user_id:
        return jsonify(balance=0)
    return jsonify(balance=balances.get(int(user_id), 0))

# --- Telegram Bot ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.args and context.args[0].startswith("balance_"):
        try:
            amount = float(context.args[0].replace("balance_", ""))
        except Exception:
            await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞.")
            return
        url = "https://pay.crypt.bot/api/createInvoice"
        headers = {
            "Crypto-Pay-API-Token": CRYPTO_PAY_TOKEN
        }
        data = {
            "asset": "USDT",
            "amount": str(amount),
            "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏",
            "user_id": update.effective_user.id
        }
        response = requests.post(url, headers=headers, json=data)
        result = response.json()
        if result.get("ok"):
            invoice_url = result["result"].get("pay_url") or result["result"].get("bot_invoice_url")
            keyboard = [
                [InlineKeyboardButton("Pay via CryptoBot", url=invoice_url)]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å —Ç–µ–∫—Å—Ç–æ–º
            with open('../public/images/Crypto Pay.mp4', 'rb') as video:
                await update.message.reply_animation(
                    animation=video,
                    caption=f"–°—á–µ—Ç –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount} USDT —Å–æ–∑–¥–∞–Ω!üí∞\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
                    reply_markup=reply_markup
                )
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞.")
        return
    
    keyboard = [
        [InlineKeyboardButton("Open moodern-app", url="https://t.me/orderenineenngbot/Ordering")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –∫–∞–∫ –∞–Ω–∏–º–∞—Ü–∏—é –≤–º–µ—Å—Ç–µ —Å —Ç–µ–∫—Å—Ç–æ–º
    with open('../public/images/Hello_bot.mp4', 'rb') as video:
        await update.message.reply_animation(
            animation=video,
            caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Moodern design!üëæ\n\n–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –¥–∏–∑–∞–π–Ω –≤ –Ω–∞—à–µ–º –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏üöÄ",
            reply_markup=reply_markup
        )

async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.args:
        try:
            amount = float(context.args[0])
        except Exception:
            await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞.")
            return
        url = "https://pay.crypt.bot/api/createInvoice"
        headers = {
            "Crypto-Pay-API-Token": CRYPTO_PAY_TOKEN
        }
        data = {
            "asset": "USDT",
            "amount": str(amount),
            "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏",
            "user_id": update.effective_user.id
        }
        response = requests.post(url, headers=headers, json=data)
        result = response.json()
        if result.get("ok"):
            invoice_url = result["result"].get("pay_url") or result["result"].get("bot_invoice_url")
            keyboard = [
                [InlineKeyboardButton("Pay via CryptoBot", url=invoice_url)]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å —Ç–µ–∫—Å—Ç–æ–º
            with open('../public/images/Crypto Pay.mp4', 'rb') as video:
                await update.message.reply_animation(
                    animation=video,
                    caption=f"–°—á–µ—Ç –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount} USDT —Å–æ–∑–¥–∞–Ω!üí∞\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
                    reply_markup=reply_markup
                )
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞.")

# --- –ó–∞–ø—É—Å–∫ Flask –∏ Telegram Bot –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ ---
def run_flask():
    app.run(port=5000)

def run_telegram():
    app_telegram = ApplicationBuilder().token(BOT_TOKEN).build()
    app_telegram.add_handler(CommandHandler("start", start))
    app_telegram.add_handler(CommandHandler("Balance", balance))
    app_telegram.run_polling()

async def check_orders():
    while True:
        conn = sqlite3.connect("orders.db")
        c = conn.cursor()
        # –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã (–æ–∂–∏–¥–∞—é—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
        c.execute("SELECT id, user_id FROM orders WHERE status='new' AND (notified IS NULL OR notified=0)")
        for order_id, user_id in c.fetchall():
            try:
                await bot.send_message(user_id, "–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –û–∂–∏–¥–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")
                c.execute("UPDATE orders SET notified=1 WHERE id=?", (order_id,))
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        # –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã (–æ–∂–∏–¥–∞—é—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ PNG)
        c.execute("SELECT id, user_id, result_file FROM orders WHERE status='done' AND (delivered IS NULL OR delivered=0)")
        for order_id, user_id, result_file in c.fetchall():
            if result_file and os.path.exists(result_file):
                try:
                    await bot.send_document(user_id, open(result_file, "rb"), caption="–í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω!")
                    c.execute("UPDATE orders SET delivered=1 WHERE id=?", (order_id,))
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ PNG: {e}")
        conn.commit()
        conn.close()
        await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

async def check_support_requests():
    while True:
        conn = sqlite3.connect("orders.db")
        c = conn.cursor()
        c.execute("SELECT id, username, user_id, message FROM support WHERE status='new'")
        for support_id, username, user_id, message in c.fetchall():
            try:
                if user_id:
                    await bot.send_message(user_id, "–í–∞—à –∑–∞–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
                c.execute("UPDATE support SET status='user_notified' WHERE id=?", (support_id,))
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ: {e}")
        conn.commit()
        conn.close()
        await asyncio.sleep(10)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=run_flask, daemon=True).start()
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    app_telegram = ApplicationBuilder().token(BOT_TOKEN).build()
    app_telegram.add_handler(CommandHandler("start", start))
    app_telegram.add_handler(CommandHandler("Balance", balance))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–∫–∞–∑–æ–≤ –∏ –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
    loop = asyncio.get_event_loop()
    loop.create_task(check_orders())
    loop.create_task(check_support_requests())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    app_telegram.run_polling()