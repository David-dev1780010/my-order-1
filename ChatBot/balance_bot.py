import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import requests
from flask import Flask, request, jsonify
import threading
import hmac
from hashlib import sha256
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
CRYPTO_PAY_TOKEN = os.getenv("CRYPTO_PAY_TOKEN")

if not BOT_TOKEN or not CRYPTO_PAY_TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–æ–∫–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

logging.basicConfig(level=logging.INFO)

# –ë–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (user_id: balance)
balances = {}

# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è webhook –∏ –±–∞–ª–∞–Ω—Å–∞
app = Flask(__name__)

@app.route('/crypto_pay_webhook', methods=['POST'])
def crypto_pay_webhook():
    signature = request.headers.get('crypto-pay-api-signature')
    raw_body = request.get_data()  # raw bytes
    secret = sha256(CRYPTO_PAY_TOKEN.encode()).digest()
    h = hmac.new(secret, raw_body, 'sha256').hexdigest()
    if h != signature:
        return jsonify({'ok': False, 'error': 'Invalid signature'}), 403

    data = request.json
    if data.get('update_type') == 'invoice_paid':
        invoice = data.get('payload', {})
        user_id = invoice.get('user_id')
        amount = float(invoice.get('amount', 0))
        if user_id:
            balances[user_id] = balances.get(user_id, 0) + amount
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            requests.post(f'https://api.telegram.org/bot{BOT_TOKEN}/sendMessage', json={
                'chat_id': user_id,
                'text': f'‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} USDT.'
            })
    return jsonify(ok=True)

@app.route('/get_balance', methods=['GET'])
def get_balance():
    user_id = request.args.get('user_id')
    if not user_id:
        return jsonify(balance=0)
    return jsonify(balance=balances.get(int(user_id), 0))

@app.route('/send_order_result', methods=['POST'])
def send_order_result():
    data = request.json
    user_id = data.get('user_id')
    file_id = data.get('file_id')
    comment = data.get('comment', '–í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ')
    if not user_id or not file_id:
        return jsonify({'ok': False, 'error': 'user_id –∏ file_id –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}), 400
    try:
        requests.post(f'https://api.telegram.org/bot{BOT_TOKEN}/sendDocument', json={
            'chat_id': user_id,
            'document': file_id,
            'caption': comment
        })
        return jsonify({'ok': True})
    except Exception as e:
        return jsonify({'ok': False, 'error': str(e)}), 500

# --- Telegram Bot ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.args and context.args[0].startswith("balance_"):
        try:
            amount = float(context.args[0].replace("balance_", ""))
        except Exception:
            await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞.")
            return
        url = "https://pay.crypt.bot/api/createInvoice"
        headers = {
            "Crypto-Pay-API-Token": CRYPTO_PAY_TOKEN
        }
        data = {
            "asset": "USDT",
            "amount": str(amount),
            "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏",
            "user_id": update.effective_user.id
        }
        response = requests.post(url, headers=headers, json=data)
        result = response.json()
        if result.get("ok"):
            invoice_url = result["result"].get("pay_url") or result["result"].get("bot_invoice_url")
            keyboard = [
                [InlineKeyboardButton("Pay via CryptoBot", url=invoice_url)]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å —Ç–µ–∫—Å—Ç–æ–º
            with open('../public/images/Crypto Pay.mp4', 'rb') as video:
                await update.message.reply_animation(
                    animation=video,
                    caption=f"–°—á–µ—Ç –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount} USDT —Å–æ–∑–¥–∞–Ω!üí∞\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
                    reply_markup=reply_markup
                )
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞.")
        return
    
    keyboard = [
        [InlineKeyboardButton("Open moodern-app", url="https://t.me/orderenineenngbot/Ordering")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –∫–∞–∫ –∞–Ω–∏–º–∞—Ü–∏—é –≤–º–µ—Å—Ç–µ —Å —Ç–µ–∫—Å—Ç–æ–º
    with open('../public/images/Hello_bot.mp4', 'rb') as video:
        await update.message.reply_animation(
            animation=video,
            caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Moodern design!üëæ\n\n–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –¥–∏–∑–∞–π–Ω –≤ –Ω–∞—à–µ–º –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏üöÄ",
            reply_markup=reply_markup
        )

async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.args:
        try:
            amount = float(context.args[0])
        except Exception:
            await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞.")
            return
        url = "https://pay.crypt.bot/api/createInvoice"
        headers = {
            "Crypto-Pay-API-Token": CRYPTO_PAY_TOKEN
        }
        data = {
            "asset": "USDT",
            "amount": str(amount),
            "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏",
            "user_id": update.effective_user.id
        }
        response = requests.post(url, headers=headers, json=data)
        result = response.json()
        if result.get("ok"):
            invoice_url = result["result"].get("pay_url") or result["result"].get("bot_invoice_url")
            keyboard = [
                [InlineKeyboardButton("Pay via CryptoBot", url=invoice_url)]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å —Ç–µ–∫—Å—Ç–æ–º
            with open('../public/images/Crypto Pay.mp4', 'rb') as video:
                await update.message.reply_animation(
                    animation=video,
                    caption=f"–°—á–µ—Ç –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount} USDT —Å–æ–∑–¥–∞–Ω!üí∞\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
                    reply_markup=reply_markup
                )
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞.")

# --- –ó–∞–ø—É—Å–∫ Flask –∏ Telegram Bot –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ ---
def run_flask():
    app.run(port=5000)

def run_telegram():
    app_telegram = ApplicationBuilder().token(BOT_TOKEN).build()
    app_telegram.add_handler(CommandHandler("start", start))
    app_telegram.add_handler(CommandHandler("Balance", balance))
    app_telegram.run_polling()

if __name__ == "__main__":
    threading.Thread(target=run_flask, daemon=True).start()
    run_telegram()